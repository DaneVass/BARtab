/*****************************
 BARtab pipeline configuration
 *****************************/
manifest {
  name = 'DaneVass/BARtab'
  author = 'Dane Vassiliadis, Henrietta Holze'
  homePage = 'www.github.com/DaneVass/BARtab'
  description = 'A Nextflow pipeline to tabulate synthetic barcode counts from NGS data.'
  mainScript = 'BARtab.nf'
  version = '1.0.0'
}

// Default pipeline params
params {
  help                = false
  input               = null
  outdir              = "./"
  input_type          = "fastq"
  pipeline            = null
  mode                = null
  mergeoverlap        = 10
  minqual             = 20
  pctqual             = 80
  upconstant          = "CGATTGACTA" // SPLINTR 1st gen upstream constant region
  downconstant        = "TGCTAATGCG" // SPLINTR 1st gen downstream constant region
  alnmismatches       = 2
  umi_dist            = 1
  cb_umi_pattern      = "CCCCCCCCCCCCCCCCNNNNNNNNNNNN"
  constants           = "up"
  constantmismatches  = 0.1
  barcode_length      = null
  min_readlength      = 20
  umi_count_filter    = 1
  umi_fraction_filter = 0.3
  max_cpus            = 6
  max_memory          = "14.GB"
  max_time            = "40.h"
  email               = null
}

executor {
  queueSize = 100
  submitRateLimit = '10 sec'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  // load profiles
  // standard    { includeConfig 'conf/standard.config'    }
  slurm       { includeConfig 'conf/slurm.config'       }
  conda       { includeConfig 'conf/conda.config'       }
  docker      { includeConfig 'conf/docker.config'      }
  singularity { includeConfig 'conf/singularity.config' }

  // test profiles
  test_SE           { includeConfig 'conf/test_SE.config'           }
  test_PE           { includeConfig 'conf/test_PE.config'           }
  test_SE_ref_free  { includeConfig 'conf/test_SE_ref_free.config'  }
  test_sc           { includeConfig 'conf/test_sc.config'           }
  test_sc_bam       { includeConfig 'conf/test_sc_bam.config'       }
  test_sc_saw_fastq { includeConfig 'conf/test_sc_saw_fastq.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// from nf-core
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}


// Function to ensure that resource requirements don't go beyond (nf-core)
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}