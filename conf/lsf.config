/*
LSF computing environment
*/

process {

    executor = 'lsf'
    
    // error strategy
    errorStrategy = 'retry'
    maxRetries = 3

    // The defaults for all processes (without labels)
    cpus   = { params.max_cpus   }
    memory = { params.max_memory }
    time   = { params.max_time   }

    // nf-core process labels
    // the check_max() function over-rides the process resources if the custom ‘max’ 
    // setting is lower than the default setting for that process.

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    // bulk samples need usually max 2GB
    // more likely to have many samples, i.e. less cores for each process to optimize sample parallelization
    withLabel:process_low_bulk {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium_bulk {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high_bulk {
        cpus   = { check_max( 6    * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }

    // single-cell processes need more memory due to larger samples
    // usually less samples, i.e. more cores per process
    withLabel:process_low_sc {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium_sc {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high_sc {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
}